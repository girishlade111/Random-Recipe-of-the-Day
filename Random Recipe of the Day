import { useState, useEffect } from 'react'
import { Button } from "/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "/components/ui/card"
import { Heart } from 'lucide-react'
import { Label } from "/components/ui/label"
import { RadioGroup, RadioGroupItem } from "/components/ui/radio-group"

// Sample recipe data
const recipes = [
  {
    id: 1,
    title: "Vegetable Stir Fry",
    ingredients: ["2 cups mixed vegetables", "1 tbsp olive oil", "2 cloves garlic", "1 tbsp soy sauce"],
    instructions: "1. Heat oil in pan\n2. Add garlic and vegetables\n3. Stir fry for 5 minutes\n4. Add soy sauce and serve",
    dietary: ["vegetarian"],
    isFavorite: false
  },
  {
    id: 2,
    title: "Vegan Chickpea Curry",
    ingredients: ["1 can chickpeas", "1 can coconut milk", "1 onion", "2 tbsp curry powder"],
    instructions: "1. Saut√© onion\n2. Add chickpeas and curry powder\n3. Pour in coconut milk\n4. Simmer for 15 minutes",
    dietary: ["vegetarian", "vegan"],
    isFavorite: false
  },
  {
    id: 3,
    title: "Gluten-Free Pasta",
    ingredients: ["8 oz gluten-free pasta", "2 cups tomato sauce", "1/2 cup parmesan"],
    instructions: "1. Cook pasta according to package\n2. Heat sauce\n3. Combine and top with cheese",
    dietary: ["gluten-free"],
    isFavorite: false
  },
  {
    id: 4,
    title: "Classic Beef Burger",
    ingredients: ["1 lb ground beef", "4 burger buns", "1 tsp salt", "1 tsp pepper"],
    instructions: "1. Form beef into patties\n2. Season with salt and pepper\n3. Grill for 4 minutes per side\n4. Serve on buns",
    dietary: [],
    isFavorite: false
  },
  {
    id: 5,
    title: "Quinoa Salad",
    ingredients: ["1 cup quinoa", "2 cups water", "1 cucumber", "1/4 cup feta cheese"],
    instructions: "1. Cook quinoa in water\n2. Chop cucumber\n3. Mix all ingredients\n4. Chill before serving",
    dietary: ["vegetarian", "gluten-free"],
    isFavorite: false
  }
]

export default function RecipeApp() {
  const [currentRecipe, setCurrentRecipe] = useState<any>(null)
  const [favorites, setFavorites] = useState<any[]>([])
  const [dietaryFilter, setDietaryFilter] = useState<string>('all')
  const [isLoading, setIsLoading] = useState(false)

  // Load favorites from localStorage on component mount
  useEffect(() => {
    const savedFavorites = localStorage.getItem('recipeFavorites')
    if (savedFavorites) {
      setFavorites(JSON.parse(savedFavorites))
    }
  }, [])

  // Save favorites to localStorage when they change
  useEffect(() => {
    localStorage.setItem('recipeFavorites', JSON.stringify(favorites))
  }, [favorites])

  const getRandomRecipe = () => {
    setIsLoading(true)
    
    // Filter recipes based on dietary selection
    let filteredRecipes = [...recipes]
    if (dietaryFilter === 'vegetarian') {
      filteredRecipes = filteredRecipes.filter(recipe => recipe.dietary.includes('vegetarian'))
    } else if (dietaryFilter === 'vegan') {
      filteredRecipes = filteredRecipes.filter(recipe => recipe.dietary.includes('vegan'))
    } else if (dietaryFilter === 'gluten-free') {
      filteredRecipes = filteredRecipes.filter(recipe => recipe.dietary.includes('gluten-free'))
    }

    // Get random recipe from filtered list
    if (filteredRecipes.length > 0) {
      const randomIndex = Math.floor(Math.random() * filteredRecipes.length)
      const selectedRecipe = filteredRecipes[randomIndex]
      
      // Check if recipe is already a favorite
      const isFavorite = favorites.some(fav => fav.id === selectedRecipe.id)
      setCurrentRecipe({ ...selectedRecipe, isFavorite })
    } else {
      setCurrentRecipe(null)
    }

    setIsLoading(false)
  }

  const toggleFavorite = () => {
    if (!currentRecipe) return

    if (currentRecipe.isFavorite) {
      // Remove from favorites
      setFavorites(favorites.filter(fav => fav.id !== currentRecipe.id))
      setCurrentRecipe({ ...currentRecipe, isFavorite: false })
    } else {
      // Add to favorites
      setFavorites([...favorites, currentRecipe])
      setCurrentRecipe({ ...currentRecipe, isFavorite: true })
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-center mb-8">Recipe of the Day</h1>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Left column - Controls */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Get a Random Recipe</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button 
                  onClick={getRandomRecipe} 
                  className="w-full"
                  disabled={isLoading}
                >
                  {isLoading ? 'Generating...' : 'Generate Recipe'}
                </Button>

                <div className="space-y-2">
                  <Label>Dietary Filters</Label>
                  <RadioGroup 
                    value={dietaryFilter} 
                    onValueChange={setDietaryFilter}
                    className="space-y-2"
                  >
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="all" id="all" />
                      <Label htmlFor="all">All Recipes</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="vegetarian" id="vegetarian" />
                      <Label htmlFor="vegetarian">Vegetarian</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="vegan" id="vegan" />
                      <Label htmlFor="vegan">Vegan</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="gluten-free" id="gluten-free" />
                      <Label htmlFor="gluten-free">Gluten-Free</Label>
                    </div>
                  </RadioGroup>
                </div>
              </CardContent>
            </Card>

            {/* Favorites Section */}
            <Card>
              <CardHeader>
                <CardTitle>Your Favorites</CardTitle>
              </CardHeader>
              <CardContent>
                {favorites.length === 0 ? (
                  <p className="text-gray-500">No favorites yet</p>
                ) : (
                  <ul className="space-y-2">
                    {favorites.map(fav => (
                      <li 
                        key={fav.id} 
                        className="p-2 hover:bg-gray-100 rounded cursor-pointer"
                        onClick={() => setCurrentRecipe({ ...fav, isFavorite: true })}
                      >
                        {fav.title}
                      </li>
                    ))}
                  </ul>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Right column - Recipe Display */}
          <div className="md:col-span-2">
            {currentRecipe ? (
              <Card>
                <CardHeader className="flex flex-row justify-between items-start">
                  <div>
                    <CardTitle>{currentRecipe.title}</CardTitle>
                    {currentRecipe.dietary.length > 0 && (
                      <div className="flex gap-2 mt-2">
                        {currentRecipe.dietary.map((diet: string) => (
                          <span key={diet} className="px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded">
                            {diet}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                  <Button 
                    variant="ghost" 
                    size="icon" 
                    onClick={toggleFavorite}
                    aria-label={currentRecipe.isFavorite ? "Remove from favorites" : "Add to favorites"}
                  >
                    <Heart 
                      className={`h-5 w-5 ${currentRecipe.isFavorite ? 'fill-red-500 text-red-500' : 'text-gray-400'}`} 
                    />
                  </Button>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <h3 className="font-semibold mb-2">Ingredients</h3>
                    <ul className="list-disc pl-5 space-y-1">
                      {currentRecipe.ingredients.map((ingredient: string, index: number) => (
                        <li key={index}>{ingredient}</li>
                      ))}
                    </ul>
                  </div>
                  <div>
                    <h3 className="font-semibold mb-2">Instructions</h3>
                    <div className="whitespace-pre-line">{currentRecipe.instructions}</div>
                  </div>
                </CardContent>
              </Card>
            ) : (
              <Card>
                <CardHeader>
                  <CardTitle>No Recipe Selected</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-500">
                    Click "Generate Recipe" to get a random recipe based on your selected filters.
                  </p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
